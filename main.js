/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TargetWordCountPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SetTargetWordCountModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    let { contentEl } = this;
    let targetWordCountInput;
    contentEl.createEl("h2", { text: "Set target word count" });
    new import_obsidian.Setting(contentEl).setName("Target Word Count").addText((text) => {
      text.setPlaceholder("Enter target word count...");
      targetWordCountInput = text.inputEl;
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Set").onClick(() => {
        const value = parseInt(targetWordCountInput.value);
        if (!isNaN(value) && value > 0) {
          this.plugin.setTargetWordCount(value);
          new import_obsidian.Notice(`Target word count set to ${value}`);
          this.close();
        } else {
          new import_obsidian.Notice("Please enter a valid number.");
        }
      });
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var TargetWordCountPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.lastValidContent = "";
    this.currentWordCount = 0;
    this.targetWordCount = 0;
    this.targetReachedOnce = false;
    this.prevNewWords = 0;
    this.baselineWordCount = 0;
    this.pluginActive = false;
  }
  onload() {
    this.addCommand({
      id: "enable-target-word-count",
      name: "Set new",
      callback: () => {
        new SetTargetWordCountModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "reset-target-word-count-progress",
      name: "Reset",
      callback: () => {
        this.resetProgress();
      }
    });
    this.addCommand({
      id: "disable-target-word-count",
      name: "Stop",
      callback: () => {
        this.disablePlugin();
      }
    });
    this.statusBarItem = this.addStatusBarItem();
    this.updateStatusBar();
    this.registerEvent(this.app.workspace.on("editor-change", this.handleEditorChange.bind(this)));
    this.registerEvent(this.app.workspace.on("active-leaf-change", this.handleActiveLeafChange.bind(this)));
  }
  setTargetWordCount(num) {
    this.targetWordCount = num;
    if (!this.pluginActive) {
      this.registerEventListeners();
    }
    this.resetProgress();
  }
  disablePlugin() {
    this.app.workspace.off("editor-change", this.handleEditorChange.bind(this));
    this.app.workspace.off("active-leaf-change", this.handleActiveLeafChange.bind(this));
    this.pluginActive = false;
    this.targetWordCount = 0;
    this.updateStatusBar();
  }
  registerEventListeners() {
    this.registerEvent(this.app.workspace.on("editor-change", this.handleEditorChange.bind(this)));
    this.registerEvent(this.app.workspace.on("active-leaf-change", this.handleActiveLeafChange.bind(this)));
    this.pluginActive = true;
  }
  resetProgress() {
    this.targetReachedOnce = false;
    const editor = this.getCurrentEditor();
    if (editor) {
      this.lastValidContent = editor.getValue();
      const baselineWordCount = this.getWordCount(this.lastValidContent);
      this.currentWordCount = 0;
      this.baselineWordCount = baselineWordCount;
    }
    this.updateStatusBar();
  }
  handleEditorChange(instance, change) {
    const editor = this.getCurrentEditor();
    if (editor) {
      const content = editor.getValue();
      const currentCharCount = content.length;
      const totalWordCount = this.getWordCount(content);
      const newWordCount = totalWordCount - this.baselineWordCount + this.prevNewWords;
      if (currentCharCount < this.lastValidContent.length && !this.targetReachedOnce && this.pluginActive) {
        editor.setValue(this.lastValidContent);
        new import_obsidian.Notice("Target Word Count Plugin: Cannot delete characters until the target word count is reached. Use command Target Word Count: Stop to re-enable editing.");
      } else {
        this.lastValidContent = content;
        if (newWordCount >= 0) {
          this.currentWordCount = newWordCount;
        }
        if (this.currentWordCount >= this.targetWordCount && !this.targetReachedOnce) {
          this.targetReachedOnce = true;
        }
        this.updateStatusBar();
      }
    }
  }
  handleActiveLeafChange() {
    const editor = this.getCurrentEditor();
    if (editor) {
      const currentContent = editor.getValue();
      this.prevNewWords = this.currentWordCount;
      this.baselineWordCount = this.getWordCount(currentContent);
      this.lastValidContent = currentContent;
      this.updateStatusBar();
    }
  }
  getCurrentEditor() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    return activeView ? activeView.editor : null;
  }
  getWordCount(text) {
    return text.split(/\s+/).filter(Boolean).length;
  }
  updateStatusBar() {
    if (this.targetWordCount === 0) {
      this.statusBarItem.setText("");
    } else if (this.targetReachedOnce) {
      this.statusBarItem.setText(`Target word count reached. Edit freely.`);
    } else {
      this.statusBarItem.setText(`New Words: ${this.currentWordCount}/${this.targetWordCount}`);
    }
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
